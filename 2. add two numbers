# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        carry=0
        result_head=l1
        

        while l1 and l2:  # [1. 先对当前node进行判断；对None的判断]
            sums=l1.val+l2.val+carry
            carry,l1.val= sums>=10,sums%10

            cur=l1
            l1=l1.next
            l2=l2.next

                
        cur.next=l1 or l2  # [1. 对None的判断]
            
        while carry: # [2.当仅剩一个或者0个linked list之后，用通过carry的循环，减少判断（仅一个linked list存在时当carry是0后，后面的链表就是答案）]
            if not cur.next:
                cur.next=ListNode(0+carry)
                break
            else:
                sums=carry+cur.next.val
                carry, cur.next.val=sums>=10,sums%10
                cur=cur.next
                
        
        return result_head
        
            
            
            
        
